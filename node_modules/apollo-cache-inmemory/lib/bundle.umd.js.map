{"version":3,"file":"bundle.umd.js","sources":["../node_modules/tslib/tslib.es6.js","../src/fixPolyfills.ts","../src/fragmentMatcher.ts","../src/cacheKeys.ts","../src/depTrackingCache.ts","../src/readFromStore.ts","../src/objectCache.ts","../src/writeToStore.ts","../src/inMemoryCache.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Make sure Map.prototype.set returns the Map instance, per spec.\n// https://github.com/apollographql/apollo-client/issues/4024\nconst testMap = new Map();\nif (testMap.set(1, 2) !== testMap) {\n  const { set } = testMap;\n  Map.prototype.set = function (...args) {\n    set.apply(this, args);\n    return this;\n  };\n}\n\n// Make sure Set.prototype.add returns the Set instance, per spec.\nconst testSet = new Set();\nif (testSet.add(3) !== testSet) {\n  const { add } = testSet;\n  Set.prototype.add = function (...args) {\n    add.apply(this, args);\n    return this;\n  };\n}\n\nconst frozen = {};\nif (typeof Object.freeze === 'function') {\n  Object.freeze(frozen);\n}\n\ntry {\n  // If non-extensible objects can't be stored as keys in a Map, make sure we\n  // do not freeze/seal/etc. an object without first attempting to put it in a\n  // Map. For example, this gives the React Native Map polyfill a chance to tag\n  // objects before they become non-extensible:\n  // https://github.com/facebook/react-native/blob/98a6f19d7c/Libraries/vendor/core/Map.js#L44-L50\n  // https://github.com/apollographql/react-apollo/issues/2442#issuecomment-426489517\n  testMap.set(frozen, frozen).delete(frozen);\n} catch {\n  const wrap = (method: <T>(obj: T) => T): typeof method => {\n    return method && (obj => {\n      try {\n        // If .set succeeds, also call .delete to avoid leaking memory.\n        testMap.set(obj, obj).delete(obj);\n      } finally {\n        // If .set or .delete fails, the exception will be silently swallowed\n        // by this return-from-finally statement:\n        return method.call(Object, obj);\n      }\n    });\n  };\n  Object.freeze = wrap(Object.freeze);\n  Object.seal = wrap(Object.seal);\n  Object.preventExtensions = wrap(Object.preventExtensions);\n}\n","import { isTest, warnOnceInDevelopment, IdValue } from 'apollo-utilities';\n\nimport {\n  ReadStoreContext,\n  FragmentMatcherInterface,\n  PossibleTypesMap,\n  IntrospectionResultData,\n} from './types';\n\nlet haveWarned = false;\n\n/**\n * This fragment matcher is very basic and unable to match union or interface type conditions\n */\nexport class HeuristicFragmentMatcher implements FragmentMatcherInterface {\n  constructor() {\n    // do nothing\n  }\n\n  public ensureReady() {\n    return Promise.resolve();\n  }\n\n  public canBypassInit() {\n    return true; // we don't need to initialize this fragment matcher.\n  }\n\n  public match(\n    idValue: IdValue,\n    typeCondition: string,\n    context: ReadStoreContext,\n  ): boolean | 'heuristic' {\n    const obj = context.store.get(idValue.id);\n\n    if (!obj && idValue.id === 'ROOT_QUERY') {\n      return true;\n    }\n\n    if (!obj) {\n      return false;\n    }\n\n    if (!obj.__typename) {\n      if (!haveWarned) {\n        console.warn(`You're using fragments in your queries, but either don't have the addTypename:\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\n   can accurately match fragments.`);\n        console.warn(\n          'Could not find __typename on Fragment ',\n          typeCondition,\n          obj,\n        );\n        console.warn(\n          `DEPRECATION WARNING: using fragments without __typename is unsupported behavior ` +\n            `and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.`,\n        );\n\n        /* istanbul ignore if */\n        if (!isTest()) {\n          // When running tests, we want to print the warning every time\n          haveWarned = true;\n        }\n      }\n\n      return 'heuristic';\n    }\n\n    if (obj.__typename === typeCondition) {\n      return true;\n    }\n\n    // XXX here we reach an issue - we don't know if this fragment should match or not. It's either:\n    // 1. A fragment on a non-matching concrete type or interface or union\n    // 2. A fragment on a matching interface or union\n    // If it's 1, we don't want to return anything, if it's 2 we want to match. We can't tell the\n    // difference, so we warn the user, but still try to match it (backcompat).\n    warnOnceInDevelopment(\n      'You are using the simple (heuristic) fragment matcher, but your ' +\n        'queries contain union or interface types. Apollo Client will not be ' +\n        'able to accurately map fragments. To make this error go away, use ' +\n        'the `IntrospectionFragmentMatcher` as described in the docs: ' +\n        'https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher',\n      'error',\n    );\n\n    return 'heuristic';\n  }\n}\n\nexport class IntrospectionFragmentMatcher implements FragmentMatcherInterface {\n  private isReady: boolean;\n  private possibleTypesMap: PossibleTypesMap;\n\n  constructor(options?: {\n    introspectionQueryResultData?: IntrospectionResultData;\n  }) {\n    if (options && options.introspectionQueryResultData) {\n      this.possibleTypesMap = this.parseIntrospectionResult(\n        options.introspectionQueryResultData,\n      );\n      this.isReady = true;\n    } else {\n      this.isReady = false;\n    }\n\n    this.match = this.match.bind(this);\n  }\n\n  public match(\n    idValue: IdValue,\n    typeCondition: string,\n    context: ReadStoreContext,\n  ) {\n    if (!this.isReady) {\n      // this should basically never happen in proper use.\n      throw new Error(\n        'FragmentMatcher.match() was called before FragmentMatcher.init()',\n      );\n    }\n\n    const obj = context.store.get(idValue.id);\n\n    if (!obj) {\n      return false;\n    }\n\n    if (!obj.__typename) {\n      throw new Error(\n        `Cannot match fragment because __typename property is missing: ${JSON.stringify(\n          obj,\n        )}`,\n      );\n    }\n\n    if (obj.__typename === typeCondition) {\n      return true;\n    }\n\n    const implementingTypes = this.possibleTypesMap[typeCondition];\n    if (implementingTypes && implementingTypes.indexOf(obj.__typename) > -1) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private parseIntrospectionResult(\n    introspectionResultData: IntrospectionResultData,\n  ): PossibleTypesMap {\n    const typeMap: PossibleTypesMap = {};\n    introspectionResultData.__schema.types.forEach(type => {\n      if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n        typeMap[type.name] = type.possibleTypes.map(\n          implementingType => implementingType.name,\n        );\n      }\n    });\n    return typeMap;\n  }\n}\n","export class CacheKeyNode<KeyType = object> {\n  private children: Map<any, CacheKeyNode<KeyType>> | null = null;\n  private key: KeyType | null = null;\n\n  lookup(...args: any[]): KeyType {\n    return this.lookupArray(args);\n  }\n\n  lookupArray(array: any[]): KeyType {\n    let node: CacheKeyNode<KeyType> = this;\n    array.forEach(value => {\n      node = node.getOrCreate(value);\n    });\n    return node.key || (node.key = Object.create(null));\n  }\n\n  getOrCreate(value: any): CacheKeyNode<KeyType> {\n    const map = this.children || (this.children = new Map());\n    let node = map.get(value);\n    if (!node) {\n      map.set(value, (node = new CacheKeyNode<KeyType>()));\n    }\n    return node;\n  }\n}\n","import { NormalizedCache, NormalizedCacheObject, StoreObject } from './types';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport class DepTrackingCache implements NormalizedCache {\n  // Wrapper function produced by the optimism library, used to depend on\n  // dataId strings, for easy invalidation of specific IDs.\n  private depend: OptimisticWrapperFunction<(dataId: string) => StoreObject>;\n\n  constructor(private data: NormalizedCacheObject = Object.create(null)) {\n    this.depend = wrap((\n      dataId: string,\n    ) => this.data[dataId], {\n      disposable: true,\n      makeCacheKey(dataId: string) {\n        return dataId;\n      }\n    });\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return this.data;\n  }\n\n  public get(dataId: string): StoreObject {\n    this.depend(dataId);\n    return this.data[dataId];\n  }\n\n  public set(dataId: string, value: StoreObject) {\n    const oldValue = this.data[dataId];\n    if (value !== oldValue) {\n      this.data[dataId] = value;\n      this.depend.dirty(dataId);\n    }\n  }\n\n  public delete(dataId: string): void {\n    if (hasOwn.call(this.data, dataId)) {\n      delete this.data[dataId];\n      this.depend.dirty(dataId);\n    }\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public replace(newData: NormalizedCacheObject): void {\n    if (newData) {\n      Object.keys(newData).forEach(dataId => {\n        this.set(dataId, newData[dataId]);\n      });\n      Object.keys(this.data).forEach(dataId => {\n        if (! hasOwn.call(newData, dataId)) {\n          this.delete(dataId);\n        }\n      });\n    } else {\n      Object.keys(this.data).forEach(dataId => {\n        this.delete(dataId);\n      });\n    }\n  }\n}\n\nexport function defaultNormalizedCacheFactory(\n  seed?: NormalizedCacheObject,\n): NormalizedCache {\n  return new DepTrackingCache(seed);\n}\n","import {\n  assign,\n  getDefaultValues,\n  getQueryDefinition,\n  isEqual,\n  DirectiveInfo,\n  FragmentMap,\n  IdValue,\n  StoreValue,\n  argumentsObjectFromField,\n  createFragmentMap,\n  getDirectiveInfoFromField,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getStoreKeyName,\n  isField,\n  isIdValue,\n  isInlineFragment,\n  isJsonValue,\n  resultKeyNameFromField,\n  shouldInclude,\n  toIdValue,\n} from 'apollo-utilities';\n\nimport { Cache } from 'apollo-cache';\n\nimport {\n  ReadStoreContext,\n  DiffQueryAgainstStoreOptions,\n  ReadQueryOptions,\n  StoreObject,\n} from './types';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionSetNode,\n} from 'graphql';\n\nimport { wrap } from 'optimism';\nimport { CacheKeyNode } from './cacheKeys';\nimport { DepTrackingCache } from './depTrackingCache';\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: ReadStoreContext,\n) => boolean | 'heuristic';\n\ntype ExecContext = {\n  query: DocumentNode;\n  fragmentMap: FragmentMap;\n  contextValue: ReadStoreContext;\n  variableValues: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n};\n\ntype ExecInfo = {\n  resultKey: string;\n  directives: DirectiveInfo;\n};\n\nexport type ExecResultMissingField = {\n  object: StoreObject;\n  fieldName: string;\n  tolerable: boolean;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  // Empty array if no missing fields encountered while computing result.\n  missing?: ExecResultMissingField[];\n};\n\ntype ExecStoreQueryOptions = {\n  query: DocumentNode;\n  rootValue: IdValue;\n  contextValue: ReadStoreContext;\n  variableValues: VariableMap;\n  // Default matcher always matches all fragments\n  fragmentMatcher: FragmentMatcher;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  rootValue: any;\n  execContext: ExecContext;\n};\n\nexport class StoreReader {\n  constructor(\n    private cacheKeyRoot = new CacheKeyNode,\n  ) {\n    const reader = this;\n    const {\n      executeStoreQuery,\n      executeSelectionSet,\n    } = reader;\n\n    this.executeStoreQuery = wrap((options: ExecStoreQueryOptions) => {\n      return executeStoreQuery.call(this, options);\n    }, {\n      makeCacheKey({\n        query,\n        rootValue,\n        contextValue,\n        variableValues,\n        fragmentMatcher,\n      }: ExecStoreQueryOptions) {\n        // The result of executeStoreQuery can be safely cached only if the\n        // underlying store is capable of tracking dependencies and invalidating\n        // the cache when relevant data have changed.\n        if (contextValue.store instanceof DepTrackingCache) {\n          return reader.cacheKeyRoot.lookup(\n            query,\n            contextValue.store,\n            fragmentMatcher,\n            JSON.stringify(variableValues),\n            rootValue.id,\n          );\n        }\n        return;\n      }\n    });\n\n    this.executeSelectionSet = wrap((options: ExecSelectionSetOptions) => {\n      return executeSelectionSet.call(this, options);\n    }, {\n      makeCacheKey({\n        selectionSet,\n        rootValue,\n        execContext,\n      }: ExecSelectionSetOptions) {\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return reader.cacheKeyRoot.lookup(\n            selectionSet,\n            execContext.contextValue.store,\n            execContext.fragmentMatcher,\n            JSON.stringify(execContext.variableValues),\n            rootValue.id,\n          );\n        }\n        return;\n      }\n    });\n  }\n\n  /**\n   * Resolves the result of a query solely from the store (i.e. never hits the server).\n   *\n   * @param {Store} store The {@link NormalizedCache} used by Apollo for the `data` portion of the\n   * store.\n   *\n   * @param {DocumentNode} query The query document to resolve from the data available in the store.\n   *\n   * @param {Object} [variables] A map from the name of a variable to its value. These variables can\n   * be referenced by the query document.\n   *\n   * @param {any} previousResult The previous result returned by this function for the same query.\n   * If nothing in the store changed since that previous result then values from the previous result\n   * will be returned to preserve referential equality.\n   */\n  public readQueryFromStore<QueryType>(\n    options: ReadQueryOptions,\n  ): QueryType {\n    const optsPatch = { returnPartialData: false };\n\n    return this.diffQueryAgainstStore<QueryType>({\n      ...options,\n      ...optsPatch,\n    }).result;\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @param  {any} previousResult The previous result returned by this function for the same query\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    variables,\n    previousResult,\n    returnPartialData = true,\n    rootId = 'ROOT_QUERY',\n    fragmentMatcherFunction,\n    config,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    // Throw the right validation error by trying to find a query in the document\n    const queryDefinition = getQueryDefinition(query);\n\n    variables = assign({}, getDefaultValues(queryDefinition), variables);\n\n    const context: ReadStoreContext = {\n      // Global settings\n      store,\n      dataIdFromObject: (config && config.dataIdFromObject) || null,\n      cacheRedirects: (config && config.cacheRedirects) || {},\n    };\n\n    const execResult = this.executeStoreQuery({\n      query,\n      rootValue: {\n        type: 'id',\n        id: rootId,\n        generated: true,\n        typename: 'Query',\n      },\n      contextValue: context,\n      variableValues: variables,\n      fragmentMatcher: fragmentMatcherFunction,\n    });\n\n    const hasMissingFields =\n      execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && ! returnPartialData) {\n      execResult.missing.forEach(info => {\n        if (info.tolerable) return;\n        throw new Error(\n          `Can't find field ${info.fieldName} on object ${JSON.stringify(\n            info.object,\n            null,\n            2,\n          )}.`,\n        );\n      });\n    }\n\n    if (previousResult) {\n      if (isEqual(previousResult, execResult.result)) {\n        execResult.result = previousResult;\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !hasMissingFields,\n    };\n  }\n\n  /**\n   * Based on graphql function from graphql-js:\n   *\n   * graphql(\n   *   schema: GraphQLSchema,\n   *   requestString: string,\n   *   rootValue?: ?any,\n   *   contextValue?: ?any,\n   *   variableValues?: ?{[key: string]: any},\n   *   operationName?: ?string\n   * ): Promise<GraphQLResult>\n   *\n   * The default export as of graphql-anywhere is sync as of 4.0,\n   * but below is an exported alternative that is async.\n   * In the 5.0 version, this will be the only export again\n   * and it will be async\n   *\n   */\n  private executeStoreQuery({\n    query,\n    rootValue,\n    contextValue,\n    variableValues,\n    // Default matcher always matches all fragments\n    fragmentMatcher = defaultFragmentMatcher,\n  }: ExecStoreQueryOptions): ExecResult {\n    const mainDefinition = getMainDefinition(query);\n    const fragments = getFragmentDefinitions(query);\n    const fragmentMap = createFragmentMap(fragments);\n    const execContext: ExecContext = {\n      query,\n      fragmentMap,\n      contextValue,\n      variableValues,\n      fragmentMatcher,\n    };\n\n    return this.executeSelectionSet({\n      selectionSet: mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    });\n  }\n\n  private executeSelectionSet({\n    selectionSet,\n    rootValue,\n    execContext,\n  }: ExecSelectionSetOptions): ExecResult {\n    const { fragmentMap, contextValue, variableValues: variables } = execContext;\n    const finalResult: ExecResult = {\n      result: {},\n    };\n\n    const objectsToMerge: { [key: string]: any }[] = [];\n\n    const object: StoreObject = contextValue.store.get(rootValue.id);\n\n    const typename =\n      (object && object.__typename) ||\n      (rootValue.id === 'ROOT_QUERY' && 'Query') ||\n      void 0;\n\n    function handleMissing<T>(result: ExecResult<T>): T {\n      if (result.missing) {\n        finalResult.missing = finalResult.missing || [];\n        finalResult.missing.push(...result.missing);\n      }\n      return result.result;\n    }\n\n    selectionSet.selections.forEach(selection => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely\n        return;\n      }\n\n      if (isField(selection)) {\n        const fieldResult = handleMissing(\n          this.executeField(object, typename, selection, execContext),\n        );\n\n        if (typeof fieldResult !== 'undefined') {\n          objectsToMerge.push({\n            [resultKeyNameFromField(selection)]: fieldResult,\n          });\n        }\n\n      } else {\n        let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          // This is a named fragment\n          fragment = fragmentMap[selection.name.value];\n\n          if (!fragment) {\n            throw new Error(`No fragment named ${selection.name.value}`);\n          }\n        }\n\n        const typeCondition = fragment.typeCondition.name.value;\n\n        const match = execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n        if (match) {\n          let fragmentExecResult = this.executeSelectionSet({\n            selectionSet: fragment.selectionSet,\n            rootValue,\n            execContext,\n          });\n\n          if (match === 'heuristic' && fragmentExecResult.missing) {\n            fragmentExecResult = {\n              ...fragmentExecResult,\n              missing: fragmentExecResult.missing.map(info => {\n                return { ...info, tolerable: true };\n              }),\n            };\n          }\n\n          objectsToMerge.push(handleMissing(fragmentExecResult));\n        }\n      }\n    });\n\n    // Perform a single merge at the end so that we can avoid making more\n    // defensive shallow copies than necessary.\n    merge(finalResult.result, objectsToMerge);\n\n    return finalResult;\n  }\n\n  private executeField(\n    object: StoreObject,\n    typename: string | void,\n    field: FieldNode,\n    execContext: ExecContext,\n  ): ExecResult {\n    const { variableValues: variables, contextValue } = execContext;\n    const fieldName = field.name.value;\n    const args = argumentsObjectFromField(field, variables);\n\n    const info: ExecInfo = {\n      resultKey: resultKeyNameFromField(field),\n      directives: getDirectiveInfoFromField(field, variables),\n    };\n\n    const readStoreResult = readStoreResolver(\n      object,\n      typename,\n      fieldName,\n      args,\n      contextValue,\n      info,\n    );\n\n    if (Array.isArray(readStoreResult.result)) {\n      return this.combineExecResults(\n        readStoreResult,\n        this.executeSubSelectedArray(\n          field,\n          readStoreResult.result,\n          execContext,\n        ),\n      );\n    }\n\n    // Handle all scalar types here\n    if (!field.selectionSet) {\n      assertSelectionSetForIdValue(field, readStoreResult.result);\n      return readStoreResult;\n    }\n\n    // From here down, the field has a selection set, which means it's trying to\n    // query a GraphQLObjectType\n    if (readStoreResult.result == null) {\n      // Basically any field in a GraphQL response can be null, or missing\n      return readStoreResult;\n    }\n\n    // Returned value is an object, and the query has a sub-selection. Recurse.\n    return this.combineExecResults(\n      readStoreResult,\n      this.executeSelectionSet({\n        selectionSet: field.selectionSet,\n        rootValue: readStoreResult.result,\n        execContext,\n      }),\n    );\n  }\n\n  private combineExecResults<T>(\n    ...execResults: ExecResult<T>[]\n  ): ExecResult<T> {\n    let missing: ExecResultMissingField[] = null;\n    execResults.forEach(execResult => {\n      if (execResult.missing) {\n        missing = missing || [];\n        missing.push(...execResult.missing);\n      }\n    });\n    return {\n      result: execResults.pop().result,\n      missing,\n    };\n  }\n\n  private executeSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): ExecResult {\n    let missing: ExecResultMissingField[] = null;\n\n    function handleMissing<T>(childResult: ExecResult<T>): T {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push(...childResult.missing);\n      }\n\n      return childResult.result;\n    }\n\n    result = result.map(item => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (Array.isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray(field, item, execContext));\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          rootValue: item,\n          execContext,\n        }));\n      }\n\n      assertSelectionSetForIdValue(field, item);\n\n      return item;\n    });\n\n    return { result, missing };\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  field: FieldNode,\n  value: any,\n) {\n  if (!field.selectionSet && isIdValue(value)) {\n    throw new Error(\n      `Missing selection set for object of type ${\n        value.typename\n      } returned for query field ${field.name.value}`\n    );\n  }\n}\n\nfunction defaultFragmentMatcher() {\n  return true;\n}\n\nexport function assertIdValue(idValue: IdValue) {\n  if (!isIdValue(idValue)) {\n    throw new Error(`Encountered a sub-selection on the query, but the store doesn't have \\\nan object reference. This should never happen during normal use unless you have custom code \\\nthat is directly manipulating the store; please file an issue.`);\n  }\n}\n\nfunction readStoreResolver(\n  object: StoreObject,\n  typename: string | void,\n  fieldName: string,\n  args: any,\n  context: ReadStoreContext,\n  { resultKey, directives }: ExecInfo,\n): ExecResult<StoreValue> {\n  let storeKeyName = fieldName;\n  if (args || directives) {\n    // We happen to know here that getStoreKeyName returns its first\n    // argument unmodified if there are no args or directives, so we can\n    // avoid calling the function at all in that case, as a small but\n    // important optimization to this frequently executed code.\n    storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n  }\n\n  let fieldValue: StoreValue | void = void 0;\n\n  if (object) {\n    fieldValue = object[storeKeyName];\n\n    if (\n      typeof fieldValue === 'undefined' &&\n      context.cacheRedirects &&\n      typeof typename === 'string'\n    ) {\n      // Look for the type in the custom resolver map\n      const type = context.cacheRedirects[typename];\n      if (type) {\n        // Look for the field in the custom resolver map\n        const resolver = type[fieldName];\n        if (resolver) {\n          fieldValue = resolver(object, args, {\n            getCacheKey(storeObj: StoreObject) {\n              return toIdValue({\n                id: context.dataIdFromObject(storeObj),\n                typename: storeObj.__typename,\n              });\n            },\n          });\n        }\n      }\n    }\n  }\n\n  if (typeof fieldValue === 'undefined') {\n    return {\n      result: fieldValue,\n      missing: [{\n        object,\n        fieldName: storeKeyName,\n        tolerable: false,\n      }],\n    };\n  }\n\n  if (isJsonValue(fieldValue)) {\n    fieldValue = fieldValue.json;\n  }\n\n  return {\n    result: fieldValue,\n  };\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction merge(\n  target: { [key: string]: any },\n  sources: { [key: string]: any }[]\n) {\n  const pastCopies: any[] = [];\n  sources.forEach(source => {\n    mergeHelper(target, source, pastCopies);\n  });\n  return target;\n}\n\nfunction mergeHelper(\n  target: { [key: string]: any },\n  source: { [key: string]: any },\n  pastCopies: any[],\n) {\n  if (source !== null && typeof source === 'object') {\n    // In case the target has been frozen, make an extensible copy so that\n    // we can merge properties into the copy.\n    if (Object.isExtensible && !Object.isExtensible(target)) {\n      target = shallowCopyForMerge(target, pastCopies);\n    }\n\n    Object.keys(source).forEach(sourceKey => {\n      const sourceValue = source[sourceKey];\n      if (hasOwn.call(target, sourceKey)) {\n        const targetValue = target[sourceKey];\n        if (sourceValue !== targetValue) {\n          // When there is a key collision, we need to make a shallow copy of\n          // target[sourceKey] so the merge does not modify any source objects.\n          // To avoid making unnecessary copies, we use a simple array to track\n          // past copies, instead of a Map, since the number of copies should\n          // be relatively small, and some Map polyfills modify their keys.\n          target[sourceKey] = mergeHelper(\n            shallowCopyForMerge(targetValue, pastCopies),\n            sourceValue,\n            pastCopies,\n          );\n        }\n      } else {\n        // If there is no collision, the target can safely share memory with\n        // the source, and the recursion can terminate here.\n        target[sourceKey] = sourceValue;\n      }\n    });\n  }\n\n  return target;\n}\n\nfunction shallowCopyForMerge<T>(value: T, pastCopies: any[]): T {\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    pastCopies.indexOf(value) < 0\n  ) {\n    if (Array.isArray(value)) {\n      value = (value as any).slice(0);\n    } else {\n      value = { ...(value as any) };\n    }\n    pastCopies.push(value);\n  }\n  return value;\n}\n","import { NormalizedCache, NormalizedCacheObject, StoreObject } from './types';\n\nexport class ObjectCache implements NormalizedCache {\n  constructor(protected data: NormalizedCacheObject = Object.create(null)) {}\n\n  public toObject() {\n    return this.data;\n  }\n  public get(dataId: string) {\n    return this.data[dataId];\n  }\n\n  public set(dataId: string, value: StoreObject) {\n    this.data[dataId] = value;\n  }\n\n  public delete(dataId: string) {\n    this.data[dataId] = void 0;\n  }\n\n  public clear() {\n    this.data = Object.create(null);\n  }\n\n  public replace(newData: NormalizedCacheObject) {\n    this.data = newData || Object.create(null);\n  }\n}\n\nexport function defaultNormalizedCacheFactory(\n  seed?: NormalizedCacheObject,\n): NormalizedCache {\n  return new ObjectCache(seed);\n}\n","import {\n  SelectionSetNode,\n  FieldNode,\n  DocumentNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from 'graphql';\nimport { FragmentMatcher } from './readFromStore';\n\nimport {\n  assign,\n  createFragmentMap,\n  FragmentMap,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getOperationDefinition,\n  IdValue,\n  isField,\n  isIdValue,\n  isInlineFragment,\n  isProduction,\n  resultKeyNameFromField,\n  shouldInclude,\n  storeKeyNameFromField,\n  StoreValue,\n  toIdValue,\n  isEqual,\n} from 'apollo-utilities';\n\nimport { ObjectCache } from './objectCache';\nimport { defaultNormalizedCacheFactory } from './depTrackingCache';\n\nimport {\n  IdGetter,\n  NormalizedCache,\n  ReadStoreContext,\n  StoreObject,\n} from './types';\n\nexport class WriteError extends Error {\n  public type = 'WriteError';\n}\n\nexport function enhanceErrorWithDocument(error: Error, document: DocumentNode) {\n  // XXX A bit hacky maybe ...\n  const enhancedError = new WriteError(\n    `Error writing result to store for query:\\n ${JSON.stringify(document)}`,\n  );\n  enhancedError.message += '\\n' + error.message;\n  enhancedError.stack = error.stack;\n  return enhancedError;\n}\n\nexport type WriteContext = {\n  readonly store: NormalizedCache;\n  readonly processedData?: { [x: string]: FieldNode[] };\n  readonly variables?: any;\n  readonly dataIdFromObject?: IdGetter;\n  readonly fragmentMap?: FragmentMap;\n  readonly fragmentMatcherFunction?: FragmentMatcher;\n};\n\nexport class StoreWriter {\n  /**\n   * Writes the result of a query to the store.\n   *\n   * @param result The result object returned for the query document.\n   *\n   * @param query The query document whose result we are writing to the store.\n   *\n   * @param store The {@link NormalizedCache} used by Apollo for the `data` portion of the store.\n   *\n   * @param variables A map from the name of a variable to its value. These variables can be\n   * referenced by the query document.\n   *\n   * @param dataIdFromObject A function that returns an object identifier given a particular result\n   * object. See the store documentation for details and an example of this function.\n   *\n   * @param fragmentMatcherFunction A function to use for matching fragment conditions in GraphQL documents\n   */\n  public writeQueryToStore({\n    query,\n    result,\n    store = defaultNormalizedCacheFactory(),\n    variables,\n    dataIdFromObject,\n    fragmentMatcherFunction,\n  }: {\n    query: DocumentNode;\n    result: Object;\n    store?: NormalizedCache;\n    variables?: Object;\n    dataIdFromObject?: IdGetter;\n    fragmentMatcherFunction?: FragmentMatcher;\n  }): NormalizedCache {\n    return this.writeResultToStore({\n      dataId: 'ROOT_QUERY',\n      result,\n      document: query,\n      store,\n      variables,\n      dataIdFromObject,\n      fragmentMatcherFunction,\n    });\n  }\n\n  public writeResultToStore({\n    dataId,\n    result,\n    document,\n    store = defaultNormalizedCacheFactory(),\n    variables,\n    dataIdFromObject,\n    fragmentMatcherFunction,\n  }: {\n    dataId: string;\n    result: any;\n    document: DocumentNode;\n    store?: NormalizedCache;\n    variables?: Object;\n    dataIdFromObject?: IdGetter;\n    fragmentMatcherFunction?: FragmentMatcher;\n  }): NormalizedCache {\n    // XXX TODO REFACTOR: this is a temporary workaround until query normalization is made to work with documents.\n    const operationDefinition = getOperationDefinition(document);\n\n    try {\n      return this.writeSelectionSetToStore({\n        result,\n        dataId,\n        selectionSet: operationDefinition.selectionSet,\n        context: {\n          store,\n          processedData: {},\n          variables: assign(\n            {},\n            getDefaultValues(operationDefinition),\n            variables,\n          ),\n          dataIdFromObject,\n          fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n          fragmentMatcherFunction,\n        },\n      });\n    } catch (e) {\n      throw enhanceErrorWithDocument(e, document);\n    }\n  }\n\n  public writeSelectionSetToStore({\n    result,\n    dataId,\n    selectionSet,\n    context,\n  }: {\n    dataId: string;\n    result: any;\n    selectionSet: SelectionSetNode;\n    context: WriteContext;\n  }): NormalizedCache {\n    const { variables, store, fragmentMap } = context;\n\n    selectionSet.selections.forEach(selection => {\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n\n      if (isField(selection)) {\n        const resultFieldKey: string = resultKeyNameFromField(selection);\n        const value: any = result[resultFieldKey];\n\n        if (typeof value !== 'undefined') {\n          this.writeFieldToStore({\n            dataId,\n            value,\n            field: selection,\n            context,\n          });\n        } else {\n          // if this is a defered field we don't need to throw / wanr\n          const isDefered =\n            selection.directives &&\n            selection.directives.length &&\n            selection.directives.some(\n              directive => directive.name && directive.name.value === 'defer',\n            );\n\n          if (!isDefered && context.fragmentMatcherFunction) {\n            // XXX We'd like to throw an error, but for backwards compatibility's sake\n            // we just print a warning for the time being.\n            //throw new WriteError(`Missing field ${resultFieldKey} in ${JSON.stringify(result, null, 2).substring(0, 100)}`);\n            if (!isProduction()) {\n              console.warn(\n                `Missing field ${resultFieldKey} in ${JSON.stringify(\n                  result,\n                  null,\n                  2,\n                ).substring(0, 100)}`,\n              );\n            }\n          }\n        }\n      } else {\n        // This is not a field, so it must be a fragment, either inline or named\n        let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          // Named fragment\n          fragment = (fragmentMap || {})[selection.name.value];\n\n          if (!fragment) {\n            throw new Error(`No fragment named ${selection.name.value}.`);\n          }\n        }\n\n        let matches = true;\n        if (context.fragmentMatcherFunction && fragment.typeCondition) {\n          // TODO we need to rewrite the fragment matchers for this to work properly and efficiently\n          // Right now we have to pretend that we're passing in an idValue and that there's a store\n          // on the context.\n          const idValue = toIdValue({ id: 'self', typename: undefined });\n          const fakeContext: ReadStoreContext = {\n            // NOTE: fakeContext always uses ObjectCache\n            // since this is only to ensure the return value of 'matches'\n            store: new ObjectCache({ self: result }),\n            cacheRedirects: {},\n          };\n          const match = context.fragmentMatcherFunction(\n            idValue,\n            fragment.typeCondition.name.value,\n            fakeContext,\n          );\n          if (!isProduction() && match === 'heuristic') {\n            console.error('WARNING: heuristic fragment matching going on!');\n          }\n          matches = !!match;\n        }\n\n        if (matches) {\n          this.writeSelectionSetToStore({\n            result,\n            selectionSet: fragment.selectionSet,\n            dataId,\n            context,\n          });\n        }\n      }\n    });\n\n    return store;\n  }\n\n  private writeFieldToStore({\n    field,\n    value,\n    dataId,\n    context,\n  }: {\n    field: FieldNode;\n    value: any;\n    dataId: string;\n    context: WriteContext;\n  }) {\n    const { variables, dataIdFromObject, store } = context;\n\n    let storeValue: StoreValue;\n    let storeObject: StoreObject;\n\n    const storeFieldName: string = storeKeyNameFromField(field, variables);\n\n    // If this is a scalar value...\n    if (!field.selectionSet || value === null) {\n      storeValue =\n        value != null && typeof value === 'object'\n          ? // If the scalar value is a JSON blob, we have to \"escape\" it so it can’t pretend to be\n            // an id.\n            { type: 'json', json: value }\n          : // Otherwise, just store the scalar directly in the store.\n            value;\n    } else if (Array.isArray(value)) {\n      const generatedId = `${dataId}.${storeFieldName}`;\n\n      storeValue = this.processArrayValue(\n        value,\n        generatedId,\n        field.selectionSet,\n        context,\n      );\n    } else {\n      // It's an object\n      let valueDataId = `${dataId}.${storeFieldName}`;\n      let generated = true;\n\n      // We only prepend the '$' if the valueDataId isn't already a generated\n      // id.\n      if (!isGeneratedId(valueDataId)) {\n        valueDataId = '$' + valueDataId;\n      }\n\n      if (dataIdFromObject) {\n        const semanticId = dataIdFromObject(value);\n\n        // We throw an error if the first character of the id is '$. This is\n        // because we use that character to designate an Apollo-generated id\n        // and we use the distinction between user-desiginated and application-provided\n        // ids when managing overwrites.\n        if (semanticId && isGeneratedId(semanticId)) {\n          throw new Error(\n            'IDs returned by dataIdFromObject cannot begin with the \"$\" character.',\n          );\n        }\n\n        if (\n          semanticId ||\n          (typeof semanticId === 'number' && semanticId === 0)\n        ) {\n          valueDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(valueDataId, field, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: valueDataId,\n          result: value,\n          selectionSet: field.selectionSet,\n          context,\n        });\n      }\n\n      // We take the id and escape it (i.e. wrap it with an enclosing object).\n      // This allows us to distinguish IDs from normal scalars.\n      const typename = value.__typename;\n      storeValue = toIdValue({ id: valueDataId, typename }, generated);\n\n      // check if there was a generated id at the location where we're\n      // about to place this new id. If there was, we have to merge the\n      // data from that id with the data we're about to write in the store.\n      storeObject = store.get(dataId);\n      const escapedId =\n        storeObject && (storeObject[storeFieldName] as IdValue | undefined);\n      if (escapedId !== storeValue && isIdValue(escapedId)) {\n        const hadTypename = escapedId.typename !== undefined;\n        const hasTypename = typename !== undefined;\n        const typenameChanged =\n          hadTypename && hasTypename && escapedId.typename !== typename;\n\n        // If there is already a real id in the store and the current id we\n        // are dealing with is generated, we throw an error.\n        // One exception we allow is when the typename has changed, which occurs\n        // when schema defines a union, both with and without an ID in the same place.\n        // checks if we \"lost\" the read id\n        if (generated && !escapedId.generated && !typenameChanged) {\n          throw new Error(\n            `Store error: the application attempted to write an object with no provided id` +\n              ` but the store already contains an id of ${\n                escapedId.id\n              } for this object. The selectionSet` +\n              ` that was trying to be written is:\\n` +\n              JSON.stringify(field),\n          );\n        }\n        // checks if we \"lost\" the typename\n        if (hadTypename && !hasTypename) {\n          throw new Error(\n            `Store error: the application attempted to write an object with no provided typename` +\n              ` but the store already contains an object with typename of ${\n                escapedId.typename\n              } for the object of id ${escapedId.id}. The selectionSet` +\n              ` that was trying to be written is:\\n` +\n              JSON.stringify(field),\n          );\n        }\n\n        if (escapedId.generated) {\n          // We should only merge if it's an object of the same type,\n          // otherwise we should delete the generated object\n          if (typenameChanged) {\n            // Only delete the generated object when the old object was\n            // inlined, and the new object is not. This is indicated by\n            // the old id being generated, and the new id being real.\n            if (!generated) {\n              store.delete(escapedId.id);\n            }\n          } else {\n            mergeWithGenerated(escapedId.id, (storeValue as IdValue).id, store);\n          }\n        }\n      }\n    }\n\n    storeObject = store.get(dataId);\n    if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n      store.set(dataId, {\n        ...storeObject,\n        [storeFieldName]: storeValue,\n      });\n    }\n  }\n\n  private processArrayValue(\n    value: any[],\n    generatedId: string,\n    selectionSet: SelectionSetNode,\n    context: WriteContext,\n  ): any[] {\n    return value.map((item: any, index: any) => {\n      if (item === null) {\n        return null;\n      }\n\n      let itemDataId = `${generatedId}.${index}`;\n\n      if (Array.isArray(item)) {\n        return this.processArrayValue(item, itemDataId, selectionSet, context);\n      }\n\n      let generated = true;\n\n      if (context.dataIdFromObject) {\n        const semanticId = context.dataIdFromObject(item);\n\n        if (semanticId) {\n          itemDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: itemDataId,\n          result: item,\n          selectionSet,\n          context,\n        });\n      }\n\n      return toIdValue(\n        { id: itemDataId, typename: item.__typename },\n        generated,\n      );\n    });\n  }\n}\n\n// Checks if the id given is an id that was generated by Apollo\n// rather than by dataIdFromObject.\nfunction isGeneratedId(id: string): boolean {\n  return id[0] === '$';\n}\n\nfunction mergeWithGenerated(\n  generatedKey: string,\n  realKey: string,\n  cache: NormalizedCache,\n): boolean {\n  if (generatedKey === realKey) {\n    return false;\n  }\n\n  const generated = cache.get(generatedKey);\n  const real = cache.get(realKey);\n  let madeChanges = false;\n\n  Object.keys(generated).forEach(key => {\n    const value = generated[key];\n    const realValue = real[key];\n\n    if (\n      isIdValue(value) &&\n      isGeneratedId(value.id) &&\n      isIdValue(realValue) &&\n      !isEqual(value, realValue) &&\n      mergeWithGenerated(value.id, realValue.id, cache)\n    ) {\n      madeChanges = true;\n    }\n  });\n\n  cache.delete(generatedKey);\n  const newRealValue = { ...generated, ...real };\n\n  if (isEqual(newRealValue, real)) {\n    return madeChanges;\n  }\n\n  cache.set(realKey, newRealValue);\n  return true;\n}\n\nfunction isDataProcessed(\n  dataId: string,\n  field: FieldNode | SelectionSetNode,\n  processedData?: { [x: string]: (FieldNode | SelectionSetNode)[] },\n): boolean {\n  if (!processedData) {\n    return false;\n  }\n\n  if (processedData[dataId]) {\n    if (processedData[dataId].indexOf(field) >= 0) {\n      return true;\n    } else {\n      processedData[dataId].push(field);\n    }\n  } else {\n    processedData[dataId] = [field];\n  }\n\n  return false;\n}\n","// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\n\nimport { Cache, ApolloCache, Transaction } from 'apollo-cache';\n\nimport { addTypenameToDocument } from 'apollo-utilities';\n\nimport { wrap } from 'optimism';\n\nimport { HeuristicFragmentMatcher } from './fragmentMatcher';\nimport {\n  ApolloReducerConfig,\n  NormalizedCache,\n  NormalizedCacheObject,\n} from './types';\n\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { DepTrackingCache } from './depTrackingCache';\nimport { CacheKeyNode } from './cacheKeys';\nimport { ObjectCache } from './objectCache';\n\nexport interface InMemoryCacheConfig extends ApolloReducerConfig {\n  resultCaching?: boolean;\n}\n\nconst defaultConfig: InMemoryCacheConfig = {\n  fragmentMatcher: new HeuristicFragmentMatcher(),\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n};\n\nexport function defaultDataIdFromObject(result: any): string | null {\n  if (result.__typename) {\n    if (result.id !== undefined) {\n      return `${result.__typename}:${result.id}`;\n    }\n    if (result._id !== undefined) {\n      return `${result.__typename}:${result._id}`;\n    }\n  }\n  return null;\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport class OptimisticCacheLayer extends ObjectCache {\n  constructor(\n    public readonly optimisticId: string,\n    // OptimisticCacheLayer objects always wrap some other parent cache, so\n    // this.parent should never be null.\n    public readonly parent: NormalizedCache,\n    public readonly transaction: Transaction<NormalizedCacheObject>,\n  ) {\n    super(Object.create(null));\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  // All the other accessor methods of ObjectCache work without knowing about\n  // this.parent, but the get method needs to be overridden to implement the\n  // fallback this.parent.get(dataId) behavior.\n  public get(dataId: string) {\n    return hasOwn.call(this.data, dataId)\n      ? this.data[dataId]\n      : this.parent.get(dataId);\n  }\n}\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: NormalizedCache;\n  private optimisticData: NormalizedCache;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n  private cacheKeyRoot = new CacheKeyNode();\n\n  // Set this while in a transaction to prevent broadcasts...\n  // don't forget to turn it back on!\n  private silenceBroadcast: boolean = false;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = { ...defaultConfig, ...config };\n\n    // backwards compat\n    if ((this.config as any).customResolvers) {\n      console.warn(\n        'customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.',\n      );\n      this.config.cacheRedirects = (this.config as any).customResolvers;\n    }\n\n    if ((this.config as any).cacheResolvers) {\n      console.warn(\n        'cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.',\n      );\n      this.config.cacheRedirects = (this.config as any).cacheResolvers;\n    }\n\n    this.addTypename = this.config.addTypename;\n\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    this.data = this.config.resultCaching\n      ? new DepTrackingCache()\n      : new ObjectCache();\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of OptimisticCacheLayer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = this.data;\n\n    this.storeReader = new StoreReader(this.cacheKeyRoot);\n    this.storeWriter = new StoreWriter();\n\n    const cache = this;\n    const { maybeBroadcastWatch } = cache;\n    this.maybeBroadcastWatch = wrap((c: Cache.WatchOptions) => {\n      return maybeBroadcastWatch.call(this, c);\n    }, {\n      makeCacheKey(c: Cache.WatchOptions) {\n        if (c.optimistic) {\n          // If we're reading optimistic data, it doesn't matter if this.data\n          // is a DepTrackingCache, since it will be ignored.\n          return;\n        }\n\n        if (c.previousResult) {\n          // If a previousResult was provided, assume the caller would prefer\n          // to compare the previous data to the new data to determine whether\n          // to broadcast, so we should disable caching by returning here, to\n          // give maybeBroadcastWatch a chance to do that comparison.\n          return;\n        }\n\n        if (cache.data instanceof DepTrackingCache) {\n          // Return a cache key (thus enabling caching) only if we're currently\n          // using a data store that can track cache dependencies.\n          return cache.cacheKeyRoot.lookup(\n            c.query,\n            JSON.stringify(c.variables),\n          );\n        }\n      }\n    });\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).toObject();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    if (typeof options.rootId === 'string' &&\n        typeof this.data.get(options.rootId) === 'undefined') {\n      return null;\n    }\n\n    return this.storeReader.readQueryFromStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(options.query),\n      variables: options.variables,\n      rootId: options.rootId,\n      fragmentMatcherFunction: this.config.fragmentMatcher.match,\n      previousResult: options.previousResult,\n      config: this.config,\n    });\n  }\n\n  public write(write: Cache.WriteOptions): void {\n    this.storeWriter.writeResultToStore({\n      dataId: write.dataId,\n      result: write.result,\n      variables: write.variables,\n      document: this.transformDocument(write.query),\n      store: this.data,\n      dataIdFromObject: this.config.dataIdFromObject,\n      fragmentMatcherFunction: this.config.fragmentMatcher.match,\n    });\n\n    this.broadcastWatches();\n  }\n\n  public diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T> {\n    return this.storeReader.diffQueryAgainstStore({\n      store: query.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(query.query),\n      variables: query.variables,\n      returnPartialData: query.returnPartialData,\n      previousResult: query.previousResult,\n      fragmentMatcherFunction: this.config.fragmentMatcher.match,\n      config: this.config,\n    });\n  }\n\n  public watch(watch: Cache.WatchOptions): () => void {\n    this.watches.add(watch);\n\n    return () => {\n      this.watches.delete(watch);\n    };\n  }\n\n  public evict(query: Cache.EvictOptions): Cache.EvictionResult {\n    throw new Error(`eviction is not implemented on InMemory Cache`);\n  }\n\n  public reset(): Promise<void> {\n    this.data.clear();\n    this.broadcastWatches();\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const toReapply: OptimisticCacheLayer[] = [];\n    let removedCount = 0;\n    let layer = this.optimisticData;\n\n    while (layer instanceof OptimisticCacheLayer) {\n      if (layer.optimisticId === idToRemove) {\n        ++removedCount;\n      } else {\n        toReapply.push(layer);\n      }\n      layer = layer.parent;\n    }\n\n    if (removedCount > 0) {\n      // Reset this.optimisticData to the first non-OptimisticCacheLayer object,\n      // which is almost certainly this.data.\n      this.optimisticData = layer;\n\n      // Reapply the layers whose optimistic IDs do not match the removed ID.\n      while (toReapply.length > 0) {\n        const layer = toReapply.pop();\n        this.performTransaction(layer.transaction, layer.optimisticId);\n      }\n\n      this.broadcastWatches();\n    }\n  }\n\n  public performTransaction(\n    transaction: Transaction<NormalizedCacheObject>,\n    // This parameter is not part of the performTransaction signature inherited\n    // from the ApolloCache abstract class, but it's useful because it saves us\n    // from duplicating this implementation in recordOptimisticTransaction.\n    optimisticId?: string,\n  ) {\n    const { data, silenceBroadcast } = this;\n    this.silenceBroadcast = true;\n\n    if (typeof optimisticId === 'string') {\n      // Add a new optimistic layer and temporarily make this.data refer to\n      // that layer for the duration of the transaction.\n      this.data = this.optimisticData = new OptimisticCacheLayer(\n        // Note that there can be multiple layers with the same optimisticId.\n        // When removeOptimistic(id) is called for that id, all matching layers\n        // will be removed, and the remaining layers will be reapplied.\n        optimisticId,\n        this.optimisticData,\n        transaction,\n      );\n    }\n\n    try {\n      transaction(this);\n    } finally {\n      this.silenceBroadcast = silenceBroadcast;\n      this.data = data;\n    }\n\n    // This broadcast does nothing if this.silenceBroadcast is true.\n    this.broadcastWatches();\n  }\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<NormalizedCacheObject>,\n    id: string,\n  ) {\n    return this.performTransaction(transaction, id);\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  protected broadcastWatches() {\n    if (!this.silenceBroadcast) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c));\n    }\n  }\n\n  // This method is wrapped in the constructor so that it will be called only\n  // if the data that would be broadcast has changed.\n  private maybeBroadcastWatch(c: Cache.WatchOptions) {\n    c.callback(\n      this.diff({\n        query: c.query,\n        variables: c.variables,\n        previousResult: c.previousResult && c.previousResult(),\n        optimistic: c.optimistic,\n      }),\n    );\n  }\n}\n"],"names":["isTest","warnOnceInDevelopment","wrap","getQueryDefinition","assign","getDefaultValues","isEqual","getMainDefinition","getFragmentDefinitions","createFragmentMap","shouldInclude","isField","resultKeyNameFromField","isInlineFragment","argumentsObjectFromField","getDirectiveInfoFromField","isIdValue","getStoreKeyName","toIdValue","isJsonValue","hasOwn","defaultNormalizedCacheFactory","tslib_1.__extends","getOperationDefinition","isProduction","storeKeyNameFromField","addTypenameToDocument","ApolloCache"],"mappings":"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"}